'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _unistore = require('unistore');

var _unistore2 = _interopRequireDefault(_unistore);

var _react3 = require('unistore/react');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import { isArraysEqualShallow } from '../utils';

var Accordion = function (_Component) {
    _inherits(Accordion, _Component);

    function Accordion() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Accordion);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Accordion.__proto__ || Object.getPrototypeOf(Accordion)).call.apply(_ref, [this].concat(args))), _this), _this.store = (0, _unistore2.default)({
            accordion: 0
            // onChange: this.props.onChange,
            // activeItems: this.props.activeItems,
        }), _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Accordion, [{
        key: 'render',


        // state = {
        //     activeItems: this.preExpandedItems(),
        //     accordion: true,
        // };

        // componentWillReceiveProps(nextProps: AccordionProps) {
        //     if (
        //         !isArraysEqualShallow(nextProps.activeItems, this.state.activeItems)
        //     ) {
        //         let newActiveItems;
        //         if (nextProps.accordion) {
        //             newActiveItems = nextProps.activeItems.length
        //                 ? [nextProps.activeItems[0]]
        //                 : [];
        //         } else {
        //             newActiveItems = nextProps.activeItems.slice();
        //         }
        //         this.setState({
        //             activeItems: newActiveItems,
        //         });

        //         nextProps.onChange(
        //             nextProps.accordion ? newActiveItems[0] : newActiveItems,
        //         );
        //     }
        // }

        // preExpandedItems() {
        //     let activeItems = [];
        //     React.Children.map(this.props.children, (item, index) => {
        //         if (item.props.expanded) {
        //             if (this.props.accordion) {
        //                 if (activeItems.length === 0)
        //                     activeItems.push(item.props.customKey || index);
        //             } else {
        //                 activeItems.push(item.props.customKey || index);
        //             }
        //         }
        //     });
        //     if (activeItems.length === 0 && this.props.activeItems.length !== 0) {
        //         activeItems = this.props.accordion
        //             ? [this.props.activeItems[0]]
        //             : this.props.activeItems.slice();
        //     }
        //     return activeItems;
        // }

        // handleClick(key: number | string) {
        //     let activeItems = this.state.activeItems;
        //     if (this.props.accordion) {
        //         activeItems = activeItems[0] === key ? [] : [key];
        //     } else {
        //         activeItems = [...activeItems];
        //         const index = activeItems.indexOf(key);
        //         const isActive = index > -1;
        //         if (isActive) {
        //             // remove active state
        //             activeItems.splice(index, 1);
        //         } else {
        //             activeItems.push(key);
        //         }
        //     }
        //     this.setState({
        //         activeItems,
        //     });

        //     this.props.onChange(
        //         this.props.accordion ? activeItems[0] : activeItems,
        //     );
        // }

        // renderItems() {
        //     const { accordion, children } = this.props;

        //     return React.Children.map(children, (item, index) => {
        //         const key = item.props.customKey || index;
        //         const expanded =
        //             this.state.activeItems.indexOf(key) !== -1 &&
        //             !item.props.disabled;

        //         return React.cloneElement(item, {
        //             disabled: item.props.disabled,
        //             accordion,
        //             expanded,
        //             key: `accordion__item-${key}`,
        //             onClick: this.handleClick.bind(this, key),
        //         });
        //     });
        // }

        // renderItems = this.renderItems.bind(this);

        value: function render() {
            var _props = this.props,
                className = _props.className,
                children = _props.children;


            return _react2.default.createElement(
                _react3.Provider,
                { store: this.store },
                _react2.default.createElement(
                    'div',
                    { className: className },
                    children
                )
            );
        }
    }]);

    return Accordion;
}(_react.Component);

Accordion.defaultProps = {
    accordion: true,
    onChange: function onChange() {},
    className: 'accordion',
    activeItems: []
};
exports.default = Accordion;